// Declaring variables
boolean isCollision = false, up = false, down = false, left = false, right = true;
int widthOfSquare = 20;
 
// Declaring instances
SnakeCharacter snake = new SnakeCharacter();
Fruit fruit = new Fruit();
 
// Initial setup
void setup() {
  size(600, 600);
  textAlign(CENTER, CENTER);
  textSize(18);
  frameRate(10);
  snake.setFruit(fruit.fruitPoint);
}
 
// Runs game
void draw() {
  background(random(255),random(255),random(255));
  if (!isGameOver()) { // Runs game only when isGameOver is false
    drawGrid(); // Draws grid on screen
    snake.create(); // Creates snake on screen
    isCollision = snake.move(); // Boolean checks if snake will continue moving
    snake.score(); // Displays number of fruit collected
    fruit.display(); // Displays fruit on screen
  } else {
    gameOver(); // Runs gameOver() if snake touches border or itself
  }
  if (isCollision) { // Creates new coordinates for fruit when snake touches it
    fruit = new Fruit(); // Creates new fruit coordinates
    snake.setFruit(fruit.fruitPoint); // Sets fruit coordinates to the new one made above
  }
}
 
// Draws 30 x 30 grid
void drawGrid() {
  stroke(random(255), random(255), random(255));
  for (int i = 0; i < 30; i++) {
    line(i*widthOfSquare, 0, i*widthOfSquare, 600);
    line(0, i*widthOfSquare, 600, i*widthOfSquare);
  }
}
 
// Sets isGameOver to true if snake touched border or itself
boolean isGameOver() {
  return snake.isSnakeTouched() || snake.isBorderTouched();
}
 
// Displays Game Over screen
void gameOver() {
  text("GAME OVER", 300, 285);
  text("Press Enter to restart.", 305, 315);
  if (keyCode == ENTER || keyCode == RETURN) { // Restarts game when Enter is pressed
    snake.reset();
  }
}
 
// Allows snake movement, but inhibits opposite movement
void keyPressed() {
  if (keyCode == UP) {
    if (!down) {
      snake.direction(0, -1);
      up = true;
      down = false;
      right = false;
      left = false;
    }
  } else if (keyCode == DOWN) {
    if (!up) {
      snake.direction(0, 1);
      down = true;
      up = false;
      right = false;
      left = false;
    }
  } else if (keyCode == LEFT) {
    if (!right) {
      snake.direction(-1, 0);
      down = false;
      up = false;
      left = true;
      right = false;
    }
  } else if (keyCode == RIGHT) {
    if (!left) {
      snake.direction(1, 0);  
      down = false;
      up = false;
      right = true;
      left = false;
    }
  }
}
 
 
 
 
 
 
 
 
 
 
 
 
 
class Fruit {
  // Declaring instances
  Point fruitPoint = new Point();
 
  // Constructor that assigns random coordinates for the fruit
  Fruit() {
    fruitPoint.x = (int(random(1, 30)));
    fruitPoint.y = (int(random(1, 30)));
  }
 
  // Displays fruit on screen
  void display() {
    fill(random(255));
    rect(fruitPoint.x*20, fruitPoint.y*20, 20, 20);
  }
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
class Point {
  // Declaring variables
  int x, y;
 
  // Empty constructor used for fruit
  Point() {
  }
 
  // Constructor used for snake length
  Point(int tempX, int tempY) {
    x = tempX;
    y = tempY;
  }
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
class SnakeCharacter {
  // Declaring variables
  int xSpeed = 1, ySpeed = 0;
 
  // Declaring instances and lists
  Point fruit;
  ArrayList<Point> pointList = new ArrayList<Point>();
 
  // Constructor that adds to snake length
  SnakeCharacter() {
    pointList.add(new Point(15, 15));
  }
 
  // Displays score (length of snake)
  void score() {
    fill(0);
    text(pointList.size(), 10, 10);
  }
 
  // Creates snake
  void create() {
    fill(random(1-100));
    for (Point point : pointList) { // Draws as many squares as fruit collected
      rect(point.x*20, point.y*20, 20, 20); // Draws snake square on a grid space
    }
  }
 
  // Moves snake's direction by key press
  void direction(int x, int y) {
    xSpeed = x;
    ySpeed = y;
  }
 
  // Boolean checks if snake will move, then draws head accordingly
  boolean move() {
    // Gets snake head from list
    Point head = pointList.get(0);
 
    // Gets coordinates from snake head
    int xHead = head.x;
    int yHead = head.y;
 
    // Calculates the position of the new snake head
    int newHeadx = xHead + xSpeed;
    int newHeady = yHead + ySpeed;
 
    // Creates the new snake head and adds it to the beginning of the list
    Point newHead = new Point(newHeadx, newHeady);
    pointList.add(0, newHead);
 
    // Removes the snake tail if there is no collision
    boolean isCollision = isFruitTouched(newHead);
    if (!isCollision) {
      pointList.remove(pointList.size() - 1);
    }
    return isCollision;
  }
 
  // Sets temporary fruit coordinates
  void setFruit(Point tempFruit) {
    fruit = tempFruit;
  }
 
  // Boolean checks if a fruit was touched
  boolean isFruitTouched(Point snakeHead) {
    if (snakeHead.x == fruit.x && snakeHead.y == fruit.y) {
      return true;
    } else {
      return false;
    }
  }
 
  // Boolean checks if the border was touched
  boolean isBorderTouched() {
    if (pointList.get(0).x < 0 || pointList.get(0).y < 0 || pointList.get(0).x >= 30 || pointList.get(0).y >= 30) {
      return true;
    }
    return false;
  }
 
  // Boolean checks if snake touched it self
  boolean isSnakeTouched() {
    Point snakeHead = pointList.get(0);
    for (int i = 1; i < pointList.size(); i++) {
      if (snakeHead.x == pointList.get(i).x && snakeHead.y == pointList.get(i).y) {
        return true;
      }
    }
    return false;
  }
 
  // Resets variables and snake length
  void reset() {
    xSpeed = 1;
    ySpeed = 0;
    pointList = new ArrayList<Point>();
    pointList.add(new Point(15, 15));
  }
}
